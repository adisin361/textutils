{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","role","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.493cb67f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n\r\n          {/* <form className=\"d-flex\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n          <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n        </form> */}\r\n          {/* <div className={`form-check form-switch text-${props.mode2==='light'?'green':'light'}`}>\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick = {props.toggleMode2}\r\n            />\r\n            <label className=\"form-check-label me-3\" htmlFor=\"flexSwitchCheckDefault\">\r\n              Enable Green Mode\r\n            </label>\r\n          </div> */}\r\n\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleMode}\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"About text here\",\r\n};\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        // console.log(\"Uppercase was clicked\"+text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Upper Case!\", \"success\");\r\n    }\r\n    const handleLowClick = () => {\r\n        // console.log(\"Uppercase was clicked\"+text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lower Case!\", \"success\");\r\n\r\n    }\r\n    const handleClearClick = () => {\r\n        // console.log(\"Uppercase was clicked\"+text);\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared!\", \"success\");\r\n\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        // console.log(\"I am copy\");\r\n        let text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n\r\n    }\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra Spaces Removed!\", \"success\");\r\n    }\r\n\r\n    const handleOnChange=(event)=>{\r\n        // console.log(\"On change\"); \r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    // setText(\"new Text\");\r\n    return (\r\n        <>\r\n        <div className=\"container\" style = {{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h4>{props.heading}</h4>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value = {text} onChange ={handleOnChange} style = {{backgroundColor: props.mode==='dark'?'grey':'white', color:  props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert to Upercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary\" onClick={handleClearClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n\r\n        </div>\r\n\r\n        <div className=\"container my-3\" style = {{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h4>Your text summary</h4>\r\n            <p>{text.split(\" \").length} words, {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes Read characters</p>\r\n            <h4>Preview</h4>\r\n            <p>{text.length>0?text:\"Enter something in the text box above to preview it here!\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        {/* <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button> */}\r\n      </div>\r\n  );\r\n}\r\n","import \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\n\nimport React, { useState } from \"react\";\n\n// import { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); //whether dark mode is enabled or not\n  // const [mode2, setMode2] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n      // setInterval(() => {\n      //   document.title = 'TextUtils is Amazing';\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = 'Install TextUtils Now';\n      // }, 1500);\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  };\n\n  // const toggleMode2 =()=>{\n  //   if(mode2==='light')\n  //   {\n  //     setMode2('green');\n  //     document.body.style.backgroundColor = 'green';\n  //     showAlert(\"Green mode has been enabled\", \"success\");\n  //   }\n  //   else\n  //   {\n  //     setMode2('light');\n  //     document.body.style.backgroundColor = 'white';\n  //     showAlert(\"Light mode has been enabled\", \"success\");\n\n  //   }\n  // }\n  return (\n    <>\n      {/* <Navbar title = \"TextUtils\" aboutText = \"About\" /> */}\n      {/* <Navbar/> */}\n      {/* <Router> */}\n        <Navbar\n          title=\"TextUtils\"\n          aboutText=\"About\"\n          mode={mode}\n          toggleMode={toggleMode}\n        />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\"> */}\n              <TextForm\n                showAlert={showAlert}\n                heading=\"Enter the text to analyse below\"\n                mode={mode}\n              />\n            {/* </Route>\n          </Switch> */}\n          {/* <About/> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n \nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(); \n"],"sourceRoot":""}